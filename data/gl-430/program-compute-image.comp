#version 420 core
#extension GL_ARB_compute_shader : require

#define TRANSFORM0		1

#define POSITION_INPUT		0
#define TEXCOORD_INPUT		1
#define COLOR_INPUT			2
#define POSITION_OUTPUT		3
#define TEXCOORD_OUTPUT		4
#define COLOR_OUTPUT		5

precision highp float;
precision highp int;
layout(std140, column_major) uniform;
layout (local_size_x = 8) in;

layout(binding = TRANSFORM0) uniform transform
{
	mat4 MVP;
} Transform;

layout(binding = POSITION_INPUT, rgba32f) readonly uniform imageBuffer PositionInput;
layout(binding = TEXCOORD_INPUT, rgba32f) readonly uniform imageBuffer TexcoordInput;
layout(binding = COLOR_INPUT, rgba32f) readonly uniform imageBuffer ColorInput;
layout(binding = POSITION_OUTPUT, rgba32f) writeonly uniform imageBuffer PositionOutput;
layout(binding = TEXCOORD_OUTPUT, rgba32f) writeonly uniform imageBuffer TexcoordOutput;
layout(binding = COLOR_OUTPUT, rgba32f) writeonly uniform imageBuffer ColorOutput;

void main()
{
	int VertexID = int(gl_LocalInvocationIndex);

	vec4 Position = Transform.MVP * imageLoad(PositionInput, VertexID);
	vec4 Texcoord = imageLoad(TexcoordInput, VertexID);
	vec4 Color = imageLoad(ColorInput, VertexID);

	imageStore(PositionOutput, VertexID, Position);
	imageStore(TexcoordOutput, VertexID, Texcoord);
	imageStore(ColorOutput, VertexID, Color * 2.0);
}

